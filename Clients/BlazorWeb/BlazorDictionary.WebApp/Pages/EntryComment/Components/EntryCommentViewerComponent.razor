
@if (EntryComment != null)
{
    <div class="card border-0">
        <div class="card-body  col-md-12">
            <p class="entry-content">@EntryComment.Content</p>

            <EntryFooterRateFavoriteComponent EntryId="@EntryComment.Id"
                                              OnFavClicked="@OnFavClicked"
                                              OnVoteClicked="@OnVoteClicked"
                                              FavoritedCount="@EntryComment.FavoriteCount"
                                              VoteType=@EntryComment.VoteType
                                              IsFavorited="@EntryComment.IsFavorited"
                                              UpVoteCount="@EntryComment.UpVoteCount"
                                              DownVoteCount="@EntryComment.DownVoteCount"
                                              />

            <EntryFooterAuthorComponent UserName="@EntryComment.CreatedByUserName"
                                        CreateDate="@EntryComment.CreatedDate" 
                                        isLoggedIn="@IdentityService.IsLoggedIn"
                                        />


        </div>
    </div>
}

@inject IJSRuntime JsRuntime
@code {
    [Parameter]
    public GetEntryCommentsViewModel EntryComment { get; set; } = new();

    [Inject]
    IVoteService voteService { get; set; }

    [Inject]
    IFavService favService { get; set; }

    [Inject]
    IIdentityService IdentityService { get; set; }

    private async Task OnFavClicked(BlazorDictionary.WebApp.Infrastructure.Models.FavClickedEventArgs args)
    {
        if (IdentityService.IsLoggedIn)
        {
            if (args.IsFaved)
            {
                await favService.CreateEntryCommentFav(args.EntryId);
                EntryComment.IsFavorited = true;
                EntryComment.FavoriteCount++;
            }
            else
            {
                await favService.DeleteEntryCommentFav(args.EntryId);
                EntryComment.IsFavorited = false;
                EntryComment.FavoriteCount--;
            }
            StateHasChanged();
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Önce giriş yapmalısın!");
        }

    }

    private async Task OnVoteClicked(VoteClickedEventArgs args)
    {
        if (IdentityService.IsLoggedIn)
        {
            if (args.UpVoteDeleted || args.DownVoteDeleted)
            {
                await voteService.DeleteEntryCommentVote(args.EntryId);
                switch (EntryComment.VoteType)
                {
                    case VoteType.DownVote:
                        EntryComment.DownVoteCount--;
                        break;
                    case VoteType.UpVote:
                        EntryComment.UpVoteCount--;
                        break;
                    default:
                        break;
                }
                EntryComment.VoteType = VoteType.None;
                return;
            }

            if (args.IsUpVoteClicked)
            {
                await voteService.CreateEntryCommentUpVote(args.EntryId);
                switch (EntryComment.VoteType)
                {
                    case VoteType.None:
                        EntryComment.UpVoteCount++;
                        break;
                    case VoteType.UpVote:
                        EntryComment.UpVoteCount--;
                        break;
                    case VoteType.DownVote:
                        EntryComment.DownVoteCount--;
                        EntryComment.UpVoteCount++;
                        break;
                    default:
                        break;
                }
                EntryComment.VoteType = VoteType.UpVote;
                return;
            }
            if (args.IsDownVoteClicked)
            {
                await voteService.CreateEntryCommentDownVote(args.EntryId);
                switch (EntryComment.VoteType)
                {
                    case VoteType.None:
                        EntryComment.DownVoteCount++;
                        break;
                    case VoteType.UpVote:
                        EntryComment.UpVoteCount--;
                        EntryComment.DownVoteCount++;
                        break;
                    case VoteType.DownVote:
                        EntryComment.DownVoteCount--;
                        break;
                    default:
                        break;
                }
                EntryComment.VoteType = VoteType.DownVote;
                return;
            }
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Önce giriş yapmalısın!");
        }


    }
}
