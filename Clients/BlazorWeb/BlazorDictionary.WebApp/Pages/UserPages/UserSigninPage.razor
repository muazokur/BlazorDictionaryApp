@page "/signin"


<div class="login-container">
    <div class="row justify-content-center align-items-start h-100">
        <div class="login-form">
            <EditForm Model="@createUserCommand" OnValidSubmit="@LoginProcess">

                @if (errorText != string.Empty)
                {
                    <span class="text-danger">@errorText</span>
                    <br />
                }
                <br />
                <div class="form-group">
                    <input @bind-value="createUserCommand.FirstName" class="form-control" type="text" placeholder="First Name" />
                </div>
                <br />
                <div class="form-group">
                    <input @bind-value="createUserCommand.LastName" class="form-control" type="text" placeholder="Last Name" />
                </div>
                <br />

                <div class="form-group">
                    <input @bind-value="createUserCommand.UserName" class="form-control" type="text" placeholder="User Name" />
                </div>
                <br />

                <div class="form-group">
                    <input @bind-value="createUserCommand.EmailAdress" class="form-control" type="text" placeholder="Email Adress" />
                </div>
                <br />
                <div class="form-group">
                    <input @bind-value="createUserCommand.Password" class="form-control" type="password" placeholder="Password" />
                </div>
                <br />
                <div class="form-group">
                    <button class="btn btn-success btn-sozluk">Endevaor to Sign in</button>
                </div>

            </EditForm>
        </div>
    </div>

</div>



@code {
    [Inject]
    IIdentityService IdentityService { get; set; }

    [Inject]
    NavigationManager navigationManager { get; set; }

    private CreateUserCommand createUserCommand = new();

    private string errorText = "";


    public async Task LoginProcess()
    {
        try
        {
            var res = await IdentityService.Create(createUserCommand);

            if (res)
            {
                errorText = "";
                navigationManager.NavigateTo("/", true);
            }

            else
                errorText = "Sign in failed with unkown reasons";

        }
        catch (Exception ex)
        {
            errorText = ex.Message;
        }
    }
}
